
  Key Array Documentation
  Copyright 2019 Orlando Llanes

  https://github.com/orlandol/keyarray

  =================
  Table of Contents
  =================
  1) License

  2) Introduction

  3) Key types

  4) Data types

  5) Reference
    5.1) List, item, and data type declarations
    5.2) Allocate list function declarations
    5.3) Free list, and developer free data, function declarations
    5.4) Insert data function declarations
    5.5) Remove data
    5.6) Data lookup
    5.7) Modify data
    5.8) Find list index
    5.9) Remove buffered space
    5.10) Copy list

  6) Examples
    6.1) Simple String Key List - Color name to RGB value
    6.2) Simple Unsigned Key List - TBD
    6.3) Complex String Key List - TBD
    6.4) Complex Unsigned Key List - TBD

  A) Todo list
    A.1) Implement string maximum length

  ==========
  1) License
  ==========

  Key Array is released under the MIT license.

  keyarray.h contains the license, a quick reference, and the
    implementation. It may be distributed/used by itself.

  You may include this documentation for convenience, however,
    doing so is not required.

  ===============
  2) Introduction
  ===============

  Key Array is a dynamic array of developer defined data, sorted by
    unique key values. It uses a modified binary array search to find
    the next insertion point. It automatically grows by 8 items, to
    buffer insertions, and moves items upward as needed when adding
    a new item.

  Key Array is implemented as a set of declaration macros in a single
    header file (keyarray.h); Designed to make code readable through
    customizing type and function names; And designed to provide a
    simple interface, with direct access to the list mostly as a means
    of extending the interface.

  The optimal size for Key Array is approximately 100,000 items. This
    amount, however, can be lower depending on the target platform.
    String key size can also reduce this amount.

  ============
  3) Key types
  ============

  Keys are unique, and serve as a point of reference to store
    developer defined data.

  Key Array currently only supports string and unsigned keys.

  String keys are compared using a string match function, to iterate
    through the list. String keys are automatically allocated and
    released by Key Array.

  Unsigned key values are compared directly.

  =============
  4) Data types
  =============

  Developer defined data can either be a simple type
    (eg: unsigned/etc), or a complex type (eg: struct/etc).

  If data is a complex type, subfields are accessed as data.subfield

  Key array treats all data as potentially dynamic. As a result, it
    uses developer defined functions to allocate or release a data
    item.

  In cases of simple data types, the developer defined functions
    can be empty.

  ============
  5) Reference
  ============

  -------------------------------------------
  5.1) List, item, and data type declarations
  -------------------------------------------
  DECLARE_STRING_KEYARRAY_TYPES( typeName, dataType )
  DECLARE_UINT_KEYARRAY_TYPES( typeName, dataType )

  Item type declarations, respectively:
    typedef struct typeNameItem {
      char* key;
      dataType data;
    } typeNameItem;

    typedef struct typeNameItem {
      unsigned key;
      dataType data;
    } typeNameItem;

  List type declaration:
    typedef struct typeName {
      size_t reservedCount;
      size_t itemCount;
      typeNameItem* item;
    } typeName;

  Declares the list as typeName. Declares the key and item types
    internally. Declares the data field as the specified dataType.

  Declarations do not persist between macros. typeName must be
    specified as listType in the function declarations.

  Direct access through list->item[index].data
    or list->item[index].data.subfield

  ----------------------------------------
  5.2) Allocate list function declarations
  ----------------------------------------
  DECLARE_STRING_KEYARRAY_CREATE( funcName, listType )
  DECLARE_UINT_KEYARRAY_CREATE( funcName, listType )

  Function prototype:
    listType* funcName( size_t reserveCount )

  Declares a function to allocate the initial list. Optionally
    pre-allocates reserveCount items.

  Return values:
    NULL = allocate/etc failure.
    Non-NULL = New list.

  --------------------------------------------------------------
  5.3) Free list, and developer free data, function declarations
  --------------------------------------------------------------
  DECLARE_STRING_KEYARRAY_FREE( funcName, listType, freeDataFunc )
  DECLARE_UINT_KEYARRAY_FREE( funcName, listType, freeDataFunc )

  Function prototype:
    void funcName( listType** keyList )

  freeDataFunc is the name of a developer defined function:
    void freeDataFunc( dataType* data ) {
    ...
    }

  Declares a function to release the list, after it releases each item
    using the developer's freeDataFunc.

  freeDataFunc is called directly in the implementation. It can either
    be empty, modify values, or release allocated data.

  --------------------------------------
  5.4) Insert data function declarations
  --------------------------------------
  DECLARE_STRING_KEYARRAY_INSERT( funcName, listType, dataType )
  DECLARE_UINT_KEYARRAY_INSERT( funcName, listType, dataType )

  Declares data insert function as funcName, respectively:
    int funcName( listType* keyList, char* key, dataType* data )
    int funcName( listType* keyList, unsigned key, dataType* data )

  Inserts data, sorted by key. The developer must allocate dynamic
    data, if applicable, prior to calling insert.

  Return values:
    0 = allocation/etc failure, or key already exists.
    Non-zero = Successful

  ----------------
  5.5) Remove data
  ----------------
  DECLARE_STRING_KEYARRAY_REMOVE( funcName, listType, freeDataFunc )
  DECLARE_UINT_KEYARRAY_REMOVE( funcName, listType, freeDataFunc )

  Declares data remove function as funcName, respectively:
    void funcName( listType* keyList, char* key )
    void funcName( listType* keyList, unsigned key )

  Removes the key and its associated data from the list.

  Internally calls developer defined data release function:
    void freeDataFunc( dataType* data ) {
    ...
    }

  ----------------
  5.6) Data search
  ----------------
  DECLARE_STRING_KEYARRAY_RETRIEVE( funcName, listType, dataType )
  DECLARE_UINT_KEYARRAY_RETRIEVE( funcName, listType, dataType )

  Declares data lookup function as funcName, respectively:
    int funcName( listType* keyList, char* key, dataType* destData )
    int funcName( listType* keyList, unsigned key, dataType* destData )

  Searches for data by key, and copies its contents to destData.
    destData must have the same dataType, to receive a copy.

  Return values:
    0 = error in state, or key not found.
    Non-zero = Successful

  ----------------
  5.7) Modify data
  ----------------
  DECLARE_STRING_KEYARRAY_MODIFY( funcName, listType, dataType )
  DECLARE_UINT_KEYARRAY_MODIFY( funcName, listType, dataType )

  Declares modify data function as funcName, respectively:
    int funcName( listType* keyList, char* key, dataType* sourceData )
    int funcName( listType* keyList, unsigned key, dataType* sourceData )

  Searches for data by key, and copies back sourceData. Assumes that
    developer worked from original item data.

  sourceData must have the same dataType, to copy back to the list.

  Return values:
    0 = error in state, or key not found.
    Non-zero = Successful

  --------------------
  5.8) Find list index
  --------------------
  DECLARE_STRING_KEYARRAY_FINDINDEX( funcName, listType )
  DECLARE_UINT_KEYARRAY_FINDINDEX( funcName, listType )

  Declares key index search function as funcName, respectively:
    size_t funcName( listType* keyList, char* key )
    size_t funcName( listType* keyList, unsigned key )

  Searches list for key, and returns the corresponding array index.
    Index value must be used immediately, or cached with care, as
    inserting a new item can invalidate the index.

  Return values:
    (-1) = error in state, or key not found.
    Otherwise, the array index for key.

  --------------------------
  5.9) Remove buffered space
  --------------------------
  DECLARE_STRING_KEYARRAY_RELEASEUNUSED( funcName, listType )

  Declares a function as funcName, to remove buffered space
    void funcName( listType* keyList )

  Assumes that items past itemCount are not in use.

  ---------------
  5.10) Copy list
  ---------------
  DECLARE_STRING_KEYARRAY_COPY( funcName, listType, dataType,
      copyDataFunc, freeDataFunc )

  Declares a function as funcName, to copy a list:
    listType* funcName( listType* sourceList )

  Internally calls developer defined data copy function:
    void copyDataFunc( dataType* dest, dataType* source ) {
    ...
    }

  Internally calls developer defined data release function:
    void freeDataFunc( dataType* data ) {
    ...
    }

  Return values:
    NULL = allocate/etc failure. freeDataFunc releases partial data.
    Non-NULL = New copy of sourceList

  ===========
  6) Examples
  ===========

  -----------------------------------------------------
  6.1) Simple String Key List - Color name to RGB value
  -----------------------------------------------------

  File: strkey1.c
  Status: In progress

  Reads an unsorted array of color name/hex value pairs,
    into a string key array.

  Demonstrates:
  - Declaration of a string key array.
  - Customization of function names.
  - Declaring the data field with a basic type.
  - Minimum declarations necessary to perform its functions.

  -----------------------------------
  6.2) Simple Unsigned Key List - TBD
  -----------------------------------

  File: uintkey1.c
  Status: Planned

  ----------------------------------
  6.3) Complex String Key List - TBD
  ----------------------------------

  File: strkey2.c
  Status: Planned

  ------------------------------------
  6.4) Complex Unsigned Key List - TBD
  ------------------------------------

  File: uintkey2.c
  Status: Planned

  ============
  A) Todo list
  ============

  ------------------------------------
  A.1) Implement string maximum length
  ------------------------------------
  - Check for STRINGKEY_MAXLEN within each function declaration macro.
  - Where STRINGKEY_MAXLEN not defined, default to (-1).
